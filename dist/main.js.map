{"version":3,"sources":["webpack:///webpack/bootstrap b6aeab7e6687dd703f49","webpack:///./src/util/type.ts","webpack:///./src/parser/node.ts","webpack:///./src/util/equal.ts","webpack:///./sass/main.jscss","webpack:///./sass/main.scss","webpack:///./src/main.ts","webpack:///./src/json2ts.ts","webpack:///./src/compiler/compile.ts","webpack:///./src/util/buffer.ts","webpack:///./src/compiler/structure.ts","webpack:///./src/util/array.ts","webpack:///./src/util/ucfirst.ts","webpack:///./src/util/uuid.ts","webpack:///./src/util/random.ts","webpack:///./src/util/repeat.ts","webpack:///./src/parser/parse.ts","webpack:///./src/parser/ast.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b6aeab7e6687dd703f49","/**\n * Get the type of a variable.\n */\n\nconst TYPE_RE: RegExp = /^\\[object\\s(\\w+)\\]$/;\n\n// tslint:disable-next-line no-any export-name\nexport function getType(value: any): string {\n    const raw: string = Object.prototype.toString.call(value);\n    const matches: RegExpExecArray | null = TYPE_RE.exec(raw);\n\n    if (matches === null || matches.length !== 2) {\n        throw new Error(`Type could not be found for \"${raw}\"`);\n    }\n\n    return matches[1];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/type.ts","import { JSONValue } from 'app/util/json';\nimport { getType } from 'app/util/type';\n\n/**\n * A Node is a intermediate presentation of the JSON structure\n */\n\nexport enum NodeType {\n    Array,\n    Boolean,\n    Number,\n    Object,\n    String\n}\n\nexport type Node = {\n    name: string;\n    type: NodeType;\n    children: Node[];\n};\n\nexport function isPrimitive(value: NodeType): boolean {\n    return (\n        value === NodeType.Boolean ||\n        value === NodeType.Number ||\n        value === NodeType.String\n    );\n}\n\nexport function getNodeType(value: JSONValue): NodeType {\n    const type: string = getType(value);\n    let nodeType: NodeType;\n\n    switch (type) {\n        case 'Array':\n            nodeType = NodeType.Array;\n            break;\n        case 'Boolean':\n            nodeType = NodeType.Boolean;\n            break;\n        case 'Number':\n            nodeType = NodeType.Number;\n            break;\n        case 'Object':\n            nodeType = NodeType.Object;\n            break;\n        case 'String':\n            nodeType = NodeType.String;\n            break;\n        default:\n            throw new Error(`Unsupported type \"${type}\"`);\n    }\n\n    return nodeType;\n}\n\nexport function create(name: string, type: NodeType): Node {\n    return {\n        name,\n        type,\n        children: []\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser/node.ts","import { getType } from 'app/util/type';\n\n/**\n * Check if any two given variables are structural and by value the same.\n * They don't have to be the same reference.\n */\n\n// tslint:disable-next-line no-any\nexport function isEqualArray(a: any[], b: any[]): boolean {\n    const length: number = a.length;\n\n    if (length !== b.length) {\n        return false;\n    }\n\n    // tslint:disable-next-line no-any\n    const aClone: any[] = a.slice(0);\n\n    // tslint:disable-next-line no-any\n    const bClone: any[] = b.slice(0);\n\n    aClone.sort();\n    bClone.sort();\n\n    for (let i: number = 0; i < length; i += 1) {\n        if (!isEqual(aClone[i], bClone[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// tslint:disable-next-line no-any\nexport function isEqualObject(a: { [id: string]: any }, b: { [id: string]: any }): boolean {\n    const aKeys: string[] = Object.keys(a);\n    const bKeys: string[] = Object.keys(b);\n\n    if (aKeys.length !== bKeys.length) {\n        return false;\n    }\n\n    for (const key of aKeys) {\n        if (!isEqual(a[key], b[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// tslint:disable-next-line no-any\nexport function isEqual(a: any, b: any): boolean {\n    if (a === b) {\n        return true;\n    }\n\n    const aType: string = getType(a);\n    const bType: string = getType(b);\n\n    if (aType !== bType) {\n        return false;\n    }\n\n    if (aType === 'Date') {\n        return a.getTime() === b.getTime();\n    } else if (aType === 'Array') {\n        return isEqualArray(a, b);\n    } else if (aType === 'Object') {\n        return isEqualObject(a, b);\n    }\n\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/equal.ts","import style from './main.scss';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/main.jscss\n// module id = 4\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/main.scss\n// module id = 5\n// module chunks = 0","import { json2ts } from 'app/json2ts';\n\n/**\n * This is just an example on how to use the JSON to Interface package.\n */\n\nconst trigger: HTMLElement = window.document.querySelector('.js-trigger');\nconst input: HTMLTextAreaElement = window.document.querySelector('.js-input');\nconst output: HTMLElement = window.document.querySelector('.js-output');\n\ntrigger.addEventListener('click', (): void => {\n    try {\n        output.innerText = json2ts(input.value, 'root');\n    } catch (e) {\n        output.innerText = e.toString();\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { compile } from 'app/compiler/compile';\nimport { structure, StructureResult } from 'app/compiler/structure';\nimport { Node } from 'app/parser/node';\nimport { parse } from 'app/parser/parse';\n\n/**\n * Convenient function that hides all implementation details.\n */\n\nexport function json2ts(json: string, rootName: string): string {\n    const result: Node = parse(json, rootName);\n    const structures: StructureResult = structure(result);\n\n    return compile(structures.structures);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/json2ts.ts","import { IPropertyTypeArray, Property, Structure } from 'app/compiler/structure';\nimport { buffer as createBuffer, IBuffer } from 'app/util/buffer';\nimport { getType } from 'app/util/type';\n\n/**\n * Compile the structures to a string.\n */\n\nexport function arrayType(types: IPropertyTypeArray): string {\n    const buffer: IBuffer = createBuffer();\n\n    if (types.length > 1) {\n        buffer.append('(');\n    }\n\n    types.forEach((type: IPropertyTypeArray | string, index: number) => {\n        if (index > 0) {\n            buffer.append('|');\n        }\n\n        if (getType(type) === 'Array') {\n            buffer.append(arrayType(<IPropertyTypeArray>type));\n        } else {\n            buffer.append(<string>type);\n        }\n    });\n\n    if (types.length > 1) {\n        buffer.append(')');\n    }\n\n    buffer.append('[]');\n\n    return buffer.flush();\n}\n\nexport function compile(structures: { [id: string]: Structure }): string {\n    const buffer: IBuffer = createBuffer();\n\n    Object.keys(structures).forEach((id: string): void => {\n        const structure: Structure = structures[id];\n\n        buffer.newLine();\n        buffer.append('interface ');\n        buffer.append(structure.name);\n        buffer.append(' {');\n\n        structure.properties.forEach((property: Property): void => {\n            buffer.newLine();\n            buffer.tab();\n            buffer.append(property.name);\n\n            if (property.optional) {\n                buffer.append('?');\n            }\n\n            buffer.append(': ');\n\n            if (property.isArray) {\n                buffer.append(arrayType(property.type));\n            } else {\n                buffer.append(property.type.join(''));\n            }\n            buffer.append(';');\n        });\n\n        buffer.newLine();\n        buffer.append('}');\n        buffer.newLine();\n\n    });\n\n    buffer.newLine();\n\n    return buffer.flush();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/compiler/compile.ts","/**\n * Buffer text.\n */\n\n// tslint:disable-next-line quotemark\nconst NEW_LINE_CHAR: string = \"\\n\";\n\n// tslint:disable-next-line quotemark\nconst TAB_CHAR: string = \"\\t\";\n\nexport interface IBuffer {\n    newLine(): void;\n    tab(): void;\n    append(str: string): void;\n    flush(): string;\n}\n\nexport function buffer(): IBuffer {\n    let text: string[] = [];\n\n    return {\n        newLine(): void {\n            text.push(NEW_LINE_CHAR);\n        },\n\n        tab(): void {\n            text.push(TAB_CHAR);\n        },\n\n        append(str: string): void {\n            text.push(str);\n        },\n\n        flush(): string {\n            const output: string = text.join('');\n\n            text = [];\n\n            return output;\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/buffer.ts","import { isPrimitive, Node, NodeType } from 'app/parser/node';\nimport { merge as mergeArrays } from 'app/util/array';\nimport { isEqualArray } from 'app/util/equal';\nimport { ucfirst } from 'app/util/ucfirst';\nimport { generator } from 'app/util/uuid';\n\n/**\n * Create a structure (interface definition) from an AST.\n */\n\nexport type PropertyType = string | IPropertyTypeArray;\n\nexport interface IPropertyTypeArray extends Array<PropertyType> {}\n\nexport type Property = {\n    name: string;\n    type: IPropertyTypeArray;\n    isArray: boolean;\n    optional: boolean;\n};\n\nexport type Structure = {\n    id: string;\n    name: string;\n    properties: Property[];\n};\n\nexport type StructureResult = {\n    id: string;\n    structures: { [id: string]: Structure };\n};\n\nexport type PropertyResult = {\n    id?: string;\n    property: Property;\n    structures: { [id: string]: Structure };\n};\n\nconst uuid: () => string = generator();\n\nexport function getType(type: NodeType): string {\n    if (type === NodeType.String) {\n        return 'string';\n    } else if (type === NodeType.Number) {\n        return 'number';\n    } else if (type === NodeType.Boolean) {\n        return 'boolean';\n    }\n\n    throw new Error(`Unsupported type ${type}`);\n}\n\n/**\n * Merge the properties of two structures to one structure.\n */\nexport function mergeProperties(a: Structure, b: Structure): Structure {\n    const properties: Property[] = a.properties.map((prop: Property): Property => {\n        return {\n            name: prop.name,\n            type: prop.type,\n            isArray: prop.isArray,\n            optional: true\n        };\n    });\n\n    b.properties.forEach((prop: Property): void => {\n        const existing: Property | undefined = properties.find((p: Property): boolean => {\n            return p.name === prop.name;\n        });\n\n        if (existing === undefined) {\n            properties.push({\n                name: prop.name,\n                type: prop.type,\n                isArray: prop.isArray,\n                optional: true\n            });\n        } else if (!isEqualArray(existing.type, prop.type)) {\n            prop.type = mergeArrays(existing.type, prop.type);\n        } else {\n            existing.optional = false;\n        }\n    });\n\n    return {\n        id: a.id,\n        name: a.name,\n        properties\n    };\n}\n\n/**\n * Add a structure to a collection of structures. If the structure name already exists, merge the structures to one\n * structure.\n */\nexport function mergeStructures(add: Structure, collection: { [id: string]: Structure }): { [id: string]: Structure } {\n    const result: { [id: string]: Structure } = {};\n    const keys: string[] = Object.keys(collection);\n\n    // The collection is empty, make the structure that needs to be added the collection.\n    if (keys.length === 0) {\n        return {\n            [add.id]: add\n        };\n    }\n\n    keys.forEach((id: string): void => {\n        const existing: Structure = collection[id];\n\n        if (existing.name === add.name) {\n            result[id] = mergeProperties(existing, add);\n        } else {\n            result[id] = existing;\n        }\n    });\n\n    return result;\n}\n\n/**\n * Create a property definition for a primitive type.\n */\nexport function primitiveProperty(node: Node): PropertyResult {\n    return {\n        property: {\n            name: node.name,\n            type: [\n                getType(node.type)\n            ],\n            isArray: false,\n            optional: false\n        },\n        structures: {}\n    };\n}\n\n/**\n * Create a property definition for an object type\n */\nexport function objectProperty(node: Node): PropertyResult {\n    const result: StructureResult = structure(node);\n    const struct: Structure = result.structures[result.id];\n\n    return {\n        id: struct.id,\n        property: {\n            name: node.name,\n            type: [\n                struct.name\n            ],\n            isArray: false,\n            optional: false\n        },\n        structures: result.structures\n    };\n}\n\n/**\n * Create a property definition for an array type\n */\nexport function arrayProperty(node: Node): PropertyResult {\n    let type: string[] = [];\n    let structures: { [id: string]: Structure } = {};\n\n    node.children.forEach((child: Node): void => {\n        const result: PropertyResult = property(child);\n\n        if (result.id !== undefined) {\n            structures = mergeStructures(result.structures[result.id], structures);\n        } else {\n            structures = {...structures, ...result.structures};\n        }\n\n        if (result.property.isArray) {\n            type = mergeArrays(type, [result.property.type]);\n        } else {\n            type = mergeArrays(type, result.property.type);\n        }\n    });\n\n    return {\n        property: {\n            name: node.name,\n            type,\n            isArray: true,\n            optional: false\n        },\n        structures\n    };\n}\n\n/**\n * Property factory function\n */\nexport function property(node: Node): PropertyResult {\n    if (isPrimitive(node.type)) {\n        return primitiveProperty(node);\n    } else if (node.type === NodeType.Object) {\n        return objectProperty(node);\n    } else if (node.type === NodeType.Array) {\n        return arrayProperty(node);\n    }\n}\n\nexport function structure(node: Node): StructureResult {\n    if (node.type !== NodeType.Object) {\n        throw new Error(`Unexpected node type \"${node.type}\"`);\n    }\n\n    let structures: { [id: string]: Structure } = {};\n    const struct: Structure = {\n        id: uuid(),\n        name: ucfirst(node.name),\n        properties: []\n    };\n\n    structures[struct.id] = struct;\n\n    node.children.forEach((child: Node): void => {\n        const result: PropertyResult = property(child);\n\n        struct.properties.push(result.property);\n        structures = {...structures, ...result.structures};\n    });\n\n    return {\n        id: struct.id,\n        structures\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/compiler/structure.ts","/**\n * Array utility functions\n */\n\n// tslint:disable no-any export-name\nexport function merge(a: any[], b: any[]): any[] {\n    const c: any = a.slice(0);\n\n    b.forEach((element: any): void => {\n        if (c.indexOf(element) === -1) {\n            c.push(element);\n        }\n    });\n\n    return c;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/array.ts","/**\n * Return the given string with the first character capitalized.\n */\n\nconst CHAR_RE: RegExp = /^(\\w)(\\w*)$/;\n\nexport function ucfirst(str: string): string {\n    const matches: RegExpExecArray | null = CHAR_RE.exec(str);\n\n    if (matches === null || matches.length !== 3) {\n        return str;\n    }\n\n    return `${matches[1].toUpperCase()}${matches[2]}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/ucfirst.ts","import { random } from 'app/util/random';\nimport { repeat } from 'app/util/repeat';\n\n/**\n * Generate an uuid.\n * @see https://en.wikipedia.org/wiki/Universally_unique_identifier\n */\n\nconst PARTS: number[] = [\n    8,\n    4,\n    4,\n    4,\n    12\n];\n\nconst CHAR: string = '.';\n\nconst GLUE: string = '-';\n\ntype UUIDStore = {\n    [id: string]: boolean;\n};\n\n/**\n * Create a placeholder string (blueprint) that will be used by the generate function.\n * The placeholder exists of characters that will be replaced in the generate function by a random hex value. The\n * character that will replaced is the `char` argument.\n */\nexport function placeholder(parts: number[] = PARTS, char: string = CHAR, glue: string = GLUE): string {\n    return parts.map((count: number): string => {\n        return repeat(char, count);\n    }).join(glue);\n}\n\n/**\n * Generate an uuid.\n * Provide a blueprint where all occurrences of replace will be replaced by a random hex value.\n */\nexport function generate(blueprint: string, replace: string): string {\n    return blueprint.split('').map((c: string): string => {\n        if (c === replace) {\n            return random(0, 15).toString(16);\n        }\n\n        return c;\n    }).join('');\n}\n\n/**\n * Create an uuid generator, that will generate unique uuids.\n */\nexport function generator(parts: number[] = PARTS, char: string = CHAR, glue: string = GLUE): () => string {\n    const blueprint: string = placeholder(parts, char, glue);\n    const store: UUIDStore = {};\n\n    return (): string => {\n        let uuid: string = generate(blueprint, char);\n\n        while (store[uuid] !== undefined) {\n            uuid = generate(blueprint, char);\n        }\n\n        store[uuid] = true;\n\n        return uuid;\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/uuid.ts","/**\n * Generate a random number within a given range.\n */\n\nexport function random(min: number = 0, max: number = 1): number {\n    if (max < min) {\n        throw new Error(`Maximum (${max}) must be larger then minimum (${min}) value`);\n    }\n\n    // tslint:disable-next-line insecure-random\n    const i: number = Math.random();\n    const diff: number = max - min;\n\n    return min + Math.round(i * diff);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/random.ts","/**\n * Repeat a string a number of times.\n */\n\nexport function repeat(input: string, count: number): string {\n    const int: number = Math.floor(count);\n\n    if (count <= 0) {\n        throw new Error(`Count must be a positive number, \"${count}\" given.`);\n    }\n\n    // the count is always one extra (with join, two parts become one)\n    // tslint:disable-next-line prefer-array-literal\n    return new Array(int + 1).join(input);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/repeat.ts","import { ast } from 'app/parser/ast';\nimport { Node } from 'app/parser/node';\nimport { JSONValue } from 'app/util/json';\n\n/**\n * Create an AST from JSON\n */\n\nexport function parse(json: string, rootName: string): Node {\n    const data: JSONValue = JSON.parse(json);\n\n    return ast(data, rootName);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser/parse.ts","import { create as createNode, getNodeType, Node, NodeType } from 'app/parser/node';\nimport { isEqual } from 'app/util/equal';\nimport { IJSONArray, JSONValue } from 'app/util/json';\n\n/**\n * Create an AST tree from an object literal\n */\n\nfunction isAlreadyChild(newChild: Node, children: Node[]): boolean {\n    return children.find((existingChild: Node): boolean => {\n        return isEqual(newChild, existingChild);\n    }) !== undefined;\n}\n\nfunction leaf(name: string, data: JSONValue): Node {\n    const type: NodeType = getNodeType(data);\n    const node: Node = createNode(name, type);\n\n    if (type === NodeType.Object) {\n        Object.keys(data).forEach((key: string): void => {\n            node.children.push(leaf(key, data[key]));\n        });\n    } else if (type === NodeType.Array) {\n        (<IJSONArray>data).forEach((child: JSONValue): void => {\n            const childNode: Node = leaf(name, child);\n\n            if (!isAlreadyChild(childNode, node.children)) {\n                node.children.push(childNode);\n            }\n        });\n    }\n\n    return node;\n}\n\nexport function ast(data: JSONValue, rootName: string): Node {\n    let root: Node;\n    const rootType: NodeType = getNodeType(data);\n\n    if (rootType === NodeType.Object) {\n        root = leaf(rootName, data);\n    } else {\n        root = createNode(rootName, NodeType.Object);\n        root.children.push(leaf('', data));\n    }\n\n    return root;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser/ast.ts"],"sourceRoot":""}